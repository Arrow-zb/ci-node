#!/usr/bin/env node

/*
 * @Description: 启动入口
 * @Author: arrow
 * @Date: 2020-08-11 17:22:39
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2020-08-13 20:33:24
 */

const app = require('../app');
const debug = require('debug')('dui-resource-ci:server');
const http = require('http');

/**
 * 从环境变量中获取端口号,默认设置诶6090
 */

const port = normalizePort(process.env.PORT || '9999');
app.set('port', port);

/**
 * 创建 HTTP 服务
 */

const server = http.createServer(app);

/**
 * 在提供的端口上监听所有网络接口
 */

server.listen(port, err => {
  if (err) {
    console.log(`服务开启失败！端口号： ${ port }`)
  }else {
    console.log(`服务开启成功！端口号： ${ port }`)
  }
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * 将端口规范化为数字、字符串或false。
 */

function normalizePort(val) {
  const result = parseInt(val, 10);

  if (isNaN(result)) {
    // named pipe
    return val;
  }

  if (result >= 0) {
    // port number
    return result;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * HTTP服务器“错误”事件的事件侦听器。
 * 监听
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
